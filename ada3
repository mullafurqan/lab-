11. Design and implement C/C++ Program to sort a given set of n integer elements using Merge Sort method and compute its time complexity. Run the program for varied values of n> 5000, and record the time taken to sort. Plot a graph of the time taken versus n. The elements can be read from a file or can be generated using the random number generator.
#include<stdio.h>
#include<time.h>
#define max 50000
 
void mergesort(int a[], int low, int high);
void merge(int a[], int low, int mid, int high);
 
void main()
{
int a[max],i,n;
clock_t start,end;
double time_taken;
 
printf("Enter the value of n:");
scanf("%d",&n);
 
for ( i = 0; i < n; i++)
{
   ​​a[i] = rand() % 1000;
}​
 
printf("\nThe array elements before\n");
for ( i = 0; i < n; i++)
{
   ​​printf("%d\t", a[i]);
}
 
start = clock();
mergesort(a,0,n-1);
end = clock();
 
time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;
 
printf("\nElements of the array after sorting are:\n");
for(i=0;i<n;i++)
printf("%d\t",a[i]);
 
printf("\nTime taken:%f", time_taken);
}
 
 
void mergesort(int a[], int low, int high)
{
int mid;
if(low < high)
{
mid = (low+high)/2;
mergesort(a, low, mid);
mergesort(a, mid+1, high);
merge(a, low, mid, high);
}
}
 
void merge(int a[], int low, int mid, int high)
{
int i, j, h, k, b[100000];
h=low; i=low; j=mid+1;
 
while((h<=mid) && (j<=high))
{
if(a[h] < a[j])
b[i++] = a[h++];
else
b[i++] = a[j++];
}
 
for(k=j; k<=high; k++)
{
b[i] = a[k];
i = i+1;
}
 
for(k=h; k<=mid; k++)
{
b[i] = a[k];
​​i = i+1; 
}
 
for(k=low; k<= high; k++)
a[k] = b[k];
}