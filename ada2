10. Design and implement C/C++ Program to sort a given set of n integer elements using Quick Sort method and compute its time complexity. Run the program for varied values of n> 5000 and record the time taken to sort. Plot a graph of the time taken versus n. The elements can be read from a file or can be generated using the random number generator.
 
#include<stdio.h>
#include<time.h>
#define max 50000
void quicksort(int a[max],int low,int high)
{
int i, j, p, temp;
if(low<high)
{
p=low;
i=low;​
j=high;
while(i<j)
{
while(a[i]<=a[p] && i< high)
​​i++;
while(a[j]>a[p])
​​j--;
if(i<j)
{
temp=a[i];
a[i]=a[j];
a[j]=temp;
}
}
temp=a[p];
a[p]=a[j];
a[j]=temp;
quicksort(a,low,j-1);
quicksort(a,j+1,high);
}
}
int main()
{
int x, count, a[max];
int i,n,high,low;
clock_t start,end;
double time_taken;
printf("Enter the value of n: ");
scanf("%d", &n);
for ( i = 0; i < n; i++)
{
   a[i] = rand() % 1000;
}
printf("\nThe array elements before\n");
for ( i = 0; i < n; i++)
{
   printf("%d\t", a[i]);
}
start = clock();
quicksort(a,0,n-1);
end = clock();
time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;
printf("\nElements of the array after sorting are:\n");
for(i=0;i<n;i++)
printf("%d\t",a[i]);
printf("\nTime taken:%f", time_taken);
}